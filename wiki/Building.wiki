#summary How to build pyactivemq.

= How to build pyactivemq =

= Common =

  1. {{{svn co http://svn.apache.org/repos/asf/activemq/activemq-cpp/trunk activemq-cpp}}}
  1. {{{svn co http://pyactivemq.googlecode.com/svn/trunk pyactivemq}}}

= Fedora Core =

  1. {{{yum install automake autoconf libtool e2fsprogs-devel cppunit-devel python-devel boost-devel}}}
  1. {{{cd activemq-cpp}}}
  1. {{{./autogen.sh && ./configure --prefix=$HOME/opt && make && make install}}}
  1. {{{cd ../pyactivemq}}}
  1. Edit {{{setup.py}}} to include {{{$HOME/opt/lib}}} as a library directory
  1. {{{python setup.py build}}}
  1. {{{python setup.py install}}} or {{{python setup.py bdist_rpm}}}

If you get the following warning when running {{{autogen.sh}}}:

{{{
aclocal:configure.ac:74: warning: macro `AM_PATH_CPPUNIT' not found in library
}}}

you need to install the {{{cppunit-devel}}} package.

You will need to edit the {{{library_dirs}}} in {{{setup.py}}} to add the directory where you installed the ActiveMQ C++ libraries ({{{$HOME/opt/lib}}} in the example above).

= Debian/Ubuntu =

The instructions for Ubuntu are almost identical to those for Fedora Core 6. Make sure you have the following packages installed prior to running {{{configure}}}:

 * libboost-python-dev
 * libcppunit-dev
 * uuid-dev

= Windows 2000/XP/Server 2003 =

Install [http://www.python.org/download/releases/2.5.1/ Python 2.5.1] to {{{C:\Python25}}}.

To install the Boost libraries, use the [http://www.boost-consulting.com/download.html installer provided by Boost Consulting]. Note that these binaries are linked against a specific version of Python (Python 2.4 in the case of Boost 1.33.1 and Python 2.5 in the case of Boost 1.34.0).

The Visual Studio 2005 project files have been configured to find Boost 1.34.0 in {{{C:\Program Files\boost\boost_1_34_0}}} and the Python includes and libraries in {{{C:\Python25\include}}} and {{{C:\Python25\libs}}}, respectively.

  1. Open {{{pyactivemq\win_build\pyactivemq.sln}}}.
  1. Select Build | Batch Build... from the menu.
  1. Press the Select All button.
  1. Press the Build button.

To build with Visual C++ Express, install the Platform SDK or the Windows SDK and add something like {{{C:\Program Files\Microsoft Platform SDK\Include}}} to the include directories and {{{C:\Program Files\Microsoft Platform SDK\Lib}}} to the library directories.

A distutils {{{setup.py}}} is included to build with Visual Studio .NET 2003. Before building the Python module itself, you should compile AMQCPP with the same version of Visual Studio.

  1. Open {{{pyactivemq\win_build\vs2003-activemq-cpp.sln}}}.
  1. Select Build | Batch Build... from the menu.
  1. Press the Select All button.
  1. Press the Build button.
  1. {{{python setup.py build}}}
  1. {{{python setup.py install}}} or {{{python setup.py bdist_wininst}}}

~~You'll need the patch attached to the [https://issues.apache.org/activemq/browse/AMQCPP-48 AMQCPP-48] issue to get the library to compile with Visual Studio .NET 2003.~~

= Running the broker =

ActiveMQ is a Java program, so you will need to install Sun's JRE/JDK or one of the other free alternatives to run it. I recommend using the Sun JDK.

You should also download ActiveMQ itself. I'm currently testing the code with [http://people.apache.org/repo/m2-snapshot-repository/org/apache/activemq/apache-activemq/5.0-SNAPSHOT/ snapshots of ActiveMQ 5.0], but [http://activemq.apache.org/activemq-411-release.html ActiveMQ 4.1.1] also works. You'll want to download the ZIP or tarball that is about 18 MB in size.

Before running the unit tests, you should start the broker.

 1. Extract the archive.
 1. Change the working directory to {{{apache-activemq-4.2-incubator-SNAPSHOT}}} (depends on the version of ActiveMQ you are using).
 1. Run {{{bin/activemq}}} ({{{bin\activemq.bat}}} on Windows).

You may want to edit the ActiveMQ script to add {{{-server}}} to {{{ACTIVEMQ_OPTS}}}, as running the broker with the Java server VM can yield improved performance. The server VM takes a while to "warm up", so it may take a few thousand messages before performance exceeds that obtained from the client VM.

= Running the unit tests =

To run the unit tests on Linux, execute {{{src/test/alltests.py}}}. To run the unit tests on Windows, execute {{{src\test\alltests.py}}}.

= Source distribution =

To create source distributions, execute the command {{{python setup.py sdist --formats=gztar,zip}}}